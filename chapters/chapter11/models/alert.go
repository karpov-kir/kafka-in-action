// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     kinactionAlert.avsc
 */
package models

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Alert struct {
	// The unique id that identifies the sensor
	Sensor_id int64 `json:"sensor_id"`
	// Time the alert was generated as UTC milliseconds from the epoch
	Time int64 `json:"time"`
	// The allowed values that our sensors will use to emit current status
	Status AlertStatus `json:"status"`
}

const AlertAvroCRC64Fingerprint = ")\x8d&,\x8ffh\x8c"

func NewAlert() Alert {
	r := Alert{}
	return r
}

func DeserializeAlert(r io.Reader) (Alert, error) {
	t := NewAlert()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAlertFromSchema(r io.Reader, schema string) (Alert, error) {
	t := NewAlert()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAlert(r Alert, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Sensor_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Time, w)
	if err != nil {
		return err
	}
	err = writeAlertStatus(r.Status, w)
	if err != nil {
		return err
	}
	return err
}

func (r Alert) Serialize(w io.Writer) error {
	return writeAlert(r, w)
}

func (r Alert) Schema() string {
	return "{\"fields\":[{\"doc\":\"The unique id that identifies the sensor\",\"name\":\"sensor_id\",\"type\":\"long\"},{\"doc\":\"Time the alert was generated as UTC milliseconds from the epoch\",\"name\":\"time\",\"type\":\"long\"},{\"doc\":\"The allowed values that our sensors will use to emit current status\",\"name\":\"status\",\"type\":{\"name\":\"AlertStatus\",\"symbols\":[\"Critical\",\"Major\",\"Minor\",\"Warning\"],\"type\":\"enum\"}}],\"name\":\"org.kafkainaction.avro.Alert\",\"type\":\"record\"}"
}

func (r Alert) SchemaName() string {
	return "org.kafkainaction.avro.Alert"
}

func (_ Alert) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Alert) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Alert) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Alert) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Alert) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Alert) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Alert) SetString(v string)   { panic("Unsupported operation") }
func (_ Alert) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Alert) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Sensor_id}

		return w

	case 1:
		w := types.Long{Target: &r.Time}

		return w

	case 2:
		w := AlertStatusWrapper{Target: &r.Status}

		return w

	}
	panic("Unknown field index")
}

func (r *Alert) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Alert) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Alert) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Alert) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Alert) HintSize(int)                     { panic("Unsupported operation") }
func (_ Alert) Finalize()                        {}

func (_ Alert) AvroCRC64Fingerprint() []byte {
	return []byte(AlertAvroCRC64Fingerprint)
}

func (r Alert) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["sensor_id"], err = json.Marshal(r.Sensor_id)
	if err != nil {
		return nil, err
	}
	output["time"], err = json.Marshal(r.Time)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Alert) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["sensor_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sensor_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sensor_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["time"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Time); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for time")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	return nil
}
