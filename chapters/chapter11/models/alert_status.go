// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     kinactionAlert.avsc
 */
package models

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AlertStatus int32

const (
	AlertStatusCritical AlertStatus = 0
	AlertStatusMajor    AlertStatus = 1
	AlertStatusMinor    AlertStatus = 2
	AlertStatusWarning  AlertStatus = 3
)

func (e AlertStatus) String() string {
	switch e {
	case AlertStatusCritical:
		return "Critical"
	case AlertStatusMajor:
		return "Major"
	case AlertStatusMinor:
		return "Minor"
	case AlertStatusWarning:
		return "Warning"
	}
	return "unknown"
}

func writeAlertStatus(r AlertStatus, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewAlertStatusValue(raw string) (r AlertStatus, err error) {
	switch raw {
	case "Critical":
		return AlertStatusCritical, nil
	case "Major":
		return AlertStatusMajor, nil
	case "Minor":
		return AlertStatusMinor, nil
	case "Warning":
		return AlertStatusWarning, nil
	}

	return -1, fmt.Errorf("invalid value for AlertStatus: '%s'", raw)

}

func (b AlertStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *AlertStatus) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewAlertStatusValue(stringVal)
	*b = val
	return err
}

type AlertStatusWrapper struct {
	Target *AlertStatus
}

func (b AlertStatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b AlertStatusWrapper) SetInt(v int32) {
	*(b.Target) = AlertStatus(v)
}

func (b AlertStatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b AlertStatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b AlertStatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b AlertStatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b AlertStatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b AlertStatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b AlertStatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b AlertStatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b AlertStatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b AlertStatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b AlertStatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b AlertStatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b AlertStatusWrapper) Finalize() {}
