// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     account.avsc
 *     funds.avsc
 *     transaction.avsc
 *     transaction_result.avsc
 */
package models

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Account struct {
	// doc
	Number int32 `json:"number"`
	// doc
	FirstName string `json:"firstName"`
	// doc
	LastName string `json:"lastName"`
	// doc
	StreetAddress string `json:"streetAddress"`
	// doc
	NumberAddress string `json:"numberAddress"`
	// City
	CityAddress string `json:"cityAddress"`
	// Country
	CountryAddress string `json:"countryAddress"`
	// account creation date
	CreationDate int64 `json:"creationDate"`
	// account creation date
	UpdateDate int64 `json:"updateDate"`
}

const AccountAvroCRC64Fingerprint = "\x0f\x96A\xeb\xf7\xf6\x81\xbb"

func NewAccount() Account {
	r := Account{}
	return r
}

func DeserializeAccount(r io.Reader) (Account, error) {
	t := NewAccount()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAccountFromSchema(r io.Reader, schema string) (Account, error) {
	t := NewAccount()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAccount(r Account, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Number, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FirstName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LastName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.StreetAddress, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumberAddress, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CityAddress, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CountryAddress, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.CreationDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.UpdateDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r Account) Serialize(w io.Writer) error {
	return writeAccount(r, w)
}

func (r Account) Schema() string {
	return "{\"fields\":[{\"doc\":\"doc\",\"name\":\"number\",\"type\":\"int\"},{\"doc\":\"doc\",\"name\":\"firstName\",\"type\":\"string\"},{\"doc\":\"doc\",\"name\":\"lastName\",\"type\":\"string\"},{\"doc\":\"doc\",\"name\":\"streetAddress\",\"type\":\"string\"},{\"doc\":\"doc\",\"name\":\"numberAddress\",\"type\":\"string\"},{\"doc\":\"City\",\"name\":\"cityAddress\",\"type\":\"string\"},{\"doc\":\"Country\",\"name\":\"countryAddress\",\"type\":\"string\"},{\"doc\":\"account creation date\",\"name\":\"creationDate\",\"type\":\"long\"},{\"doc\":\"account creation date\",\"name\":\"updateDate\",\"type\":\"long\"}],\"name\":\"org.kafkainaction.Account\",\"type\":\"record\"}"
}

func (r Account) SchemaName() string {
	return "org.kafkainaction.Account"
}

func (_ Account) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Account) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Account) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Account) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Account) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Account) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Account) SetString(v string)   { panic("Unsupported operation") }
func (_ Account) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Account) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Number}

		return w

	case 1:
		w := types.String{Target: &r.FirstName}

		return w

	case 2:
		w := types.String{Target: &r.LastName}

		return w

	case 3:
		w := types.String{Target: &r.StreetAddress}

		return w

	case 4:
		w := types.String{Target: &r.NumberAddress}

		return w

	case 5:
		w := types.String{Target: &r.CityAddress}

		return w

	case 6:
		w := types.String{Target: &r.CountryAddress}

		return w

	case 7:
		w := types.Long{Target: &r.CreationDate}

		return w

	case 8:
		w := types.Long{Target: &r.UpdateDate}

		return w

	}
	panic("Unknown field index")
}

func (r *Account) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Account) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Account) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Account) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Account) HintSize(int)                     { panic("Unsupported operation") }
func (_ Account) Finalize()                        {}

func (_ Account) AvroCRC64Fingerprint() []byte {
	return []byte(AccountAvroCRC64Fingerprint)
}

func (r Account) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["number"], err = json.Marshal(r.Number)
	if err != nil {
		return nil, err
	}
	output["firstName"], err = json.Marshal(r.FirstName)
	if err != nil {
		return nil, err
	}
	output["lastName"], err = json.Marshal(r.LastName)
	if err != nil {
		return nil, err
	}
	output["streetAddress"], err = json.Marshal(r.StreetAddress)
	if err != nil {
		return nil, err
	}
	output["numberAddress"], err = json.Marshal(r.NumberAddress)
	if err != nil {
		return nil, err
	}
	output["cityAddress"], err = json.Marshal(r.CityAddress)
	if err != nil {
		return nil, err
	}
	output["countryAddress"], err = json.Marshal(r.CountryAddress)
	if err != nil {
		return nil, err
	}
	output["creationDate"], err = json.Marshal(r.CreationDate)
	if err != nil {
		return nil, err
	}
	output["updateDate"], err = json.Marshal(r.UpdateDate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Account) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["number"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Number); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for number")
	}
	val = func() json.RawMessage {
		if v, ok := fields["firstName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirstName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for firstName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lastName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["streetAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StreetAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for streetAddress")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numberAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumberAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numberAddress")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cityAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CityAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cityAddress")
	}
	val = func() json.RawMessage {
		if v, ok := fields["countryAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CountryAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for countryAddress")
	}
	val = func() json.RawMessage {
		if v, ok := fields["creationDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreationDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for creationDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["updateDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdateDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for updateDate")
	}
	return nil
}
