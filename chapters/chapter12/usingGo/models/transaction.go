// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     account.avsc
 *     funds.avsc
 *     transaction.avsc
 *     transaction_result.avsc
 */
package models

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Transaction struct {
	// The unique transaction guid
	Guid string `json:"guid"`
	// Account name
	Account string `json:"account"`

	Amount Bytes `json:"amount"`

	Type TransactionType `json:"type"`
	// Transaction currency
	Currency string `json:"currency"`
	// Transaction country
	Country string `json:"country"`
}

const TransactionAvroCRC64Fingerprint = "e͖+\bϡT"

func NewTransaction() Transaction {
	r := Transaction{}
	return r
}

func DeserializeTransaction(r io.Reader) (Transaction, error) {
	t := NewTransaction()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTransactionFromSchema(r io.Reader, schema string) (Transaction, error) {
	t := NewTransaction()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTransaction(r Transaction, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Guid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Account, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Amount, w)
	if err != nil {
		return err
	}
	err = writeTransactionType(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Currency, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Country, w)
	if err != nil {
		return err
	}
	return err
}

func (r Transaction) Serialize(w io.Writer) error {
	return writeTransaction(r, w)
}

func (r Transaction) Schema() string {
	return "{\"fields\":[{\"doc\":\"The unique transaction guid\",\"name\":\"guid\",\"type\":\"string\"},{\"avro.java.string\":\"java.lang.String\",\"doc\":\"Account name\",\"name\":\"account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":{\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2,\"type\":\"bytes\"}},{\"name\":\"type\",\"type\":{\"name\":\"TransactionType\",\"symbols\":[\"DEPOSIT\",\"WITHDRAW\"],\"type\":\"enum\"}},{\"doc\":\"Transaction currency\",\"name\":\"currency\",\"type\":\"string\"},{\"doc\":\"Transaction country\",\"name\":\"country\",\"type\":\"string\"}],\"name\":\"org.kafkainaction.Transaction\",\"type\":\"record\"}"
}

func (r Transaction) SchemaName() string {
	return "org.kafkainaction.Transaction"
}

func (_ Transaction) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Transaction) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Transaction) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Transaction) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Transaction) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Transaction) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Transaction) SetString(v string)   { panic("Unsupported operation") }
func (_ Transaction) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Transaction) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Guid}

		return w

	case 1:
		w := types.String{Target: &r.Account}

		return w

	case 2:
		w := BytesWrapper{Target: &r.Amount}

		return w

	case 3:
		w := TransactionTypeWrapper{Target: &r.Type}

		return w

	case 4:
		w := types.String{Target: &r.Currency}

		return w

	case 5:
		w := types.String{Target: &r.Country}

		return w

	}
	panic("Unknown field index")
}

func (r *Transaction) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Transaction) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Transaction) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Transaction) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Transaction) HintSize(int)                     { panic("Unsupported operation") }
func (_ Transaction) Finalize()                        {}

func (_ Transaction) AvroCRC64Fingerprint() []byte {
	return []byte(TransactionAvroCRC64Fingerprint)
}

func (r Transaction) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["guid"], err = json.Marshal(r.Guid)
	if err != nil {
		return nil, err
	}
	output["account"], err = json.Marshal(r.Account)
	if err != nil {
		return nil, err
	}
	output["amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["currency"], err = json.Marshal(r.Currency)
	if err != nil {
		return nil, err
	}
	output["country"], err = json.Marshal(r.Country)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Transaction) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["guid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Guid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for guid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["account"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Account); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for account")
	}
	val = func() json.RawMessage {
		if v, ok := fields["amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["currency"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Currency); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for currency")
	}
	val = func() json.RawMessage {
		if v, ok := fields["country"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Country); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for country")
	}
	return nil
}
